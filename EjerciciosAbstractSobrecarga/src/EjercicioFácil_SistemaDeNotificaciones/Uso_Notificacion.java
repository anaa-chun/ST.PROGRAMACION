package EjercicioF√°cil_SistemaDeNotificaciones;

// @author: Ana Chun G√≥mez de Castro DAM 1

public class Uso_Notificacion {

	public static void main(String[] args) {
		/*
		 * 1. Ejercicio F√°cil: Sistema de Notificaciones Imagina que est√°s dise√±ando un
		 * sistema de notificaciones para una aplicaci√≥n. Las notificaciones pueden ser
		 * de varios tipos (por ejemplo, correo electr√≥nico, SMS, notificaciones en la
		 * aplicaci√≥n). Todas las notificaciones comparten algunas propiedades comunes,
		 * como el mensaje y el destinatario, pero cada tipo tiene tambi√©n sus
		 * propiedades √∫nicas. 
		 * 
		 * - Crea una clase abstracta llamada Notificacion que incluya propiedades b√°sicas como mensaje 
		 * y destinatario, y defina un m√©todo abstracto enviar(). 
		 * 
		 * - Implementa al menos tres clases concretas que extiendan Notificacion: CorreoElectronico, SMS 
		 * y NotificacionApp. Cada una debe tener al menos un constructor adicional que acepte par√°metros 
		 * espec√≠ficos de su tipo. Por ejemplo, CorreoElectronico podr√≠a tener un par√°metro adicional para
		 * el asunto, SMS podr√≠a tener un l√≠mite de caracteres, y NotificacionApp podr√≠a tener un identificador 
		 * de dispositivo. 
		 * 
		 * - Demuestra la sobrecarga de onstructores en la clase abstracta Notificacion permitiendo 
		 * inicializar el mensaje y el destinatario con diferentes formatos o detalles adicionales.
		 */

				
		
		// Creo tres instancias de las clases concretas CorreoElectronico, SMS y NotificacionApp
		Notificacion a = new CorreoElectronico("¬°Adi√≥s, puto cabr√≥n! üòù", " donaldtrump@icloud.com üìß, ",
				"'Hola mundo üëã'");
		a.enviar();

		Notificacion b = new SMS(" al n√∫mero de tel√©fono de Mickey Mouse üê≠", "657498052 üìû", 9);
		b.enviar();

		Notificacion c = new NotificacionApp("Hey, que tal!", " Pato Donald ü¶Ü", "ID583");
		c.enviar();
		
		//Llamo al m√©todo enviar() que eso hace que muestre los diferentes tipos de notificaciones

	}

}
